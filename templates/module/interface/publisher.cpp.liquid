{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
{% assign class_capital = module.name | capital | append: interface.name | capital  %}
{% assign class = "Abstract" | append: class_capital | append: "Publisher" -%}
{% assign sub_class = "I" | append: class_capital | append: "SubscriberInterface" %}
{% capture category %}API|{{module.name | capital}}|{{interface.name | capital}}{% endcapture -%}
{% capture nl %}
{% endcapture %}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "Abstract{{module.name|capital}}{{interface.name|capital}}Publisher.h"
{% if interface.description%}
/**
   \brief {{interface.description}}
*/
{% endif %}
{{class}}::{{class}}()
    : I{{module.name | capital}}{{interface.name | capital}}PublisherInterface()
{
}

{{class}}::~{{class}}()
{
}

void {{class}}::SubscribeTo{{class_capital}}StateChanged({{sub_class}}& Subscriber)
{
    {{class_capital}}StateSubscribers.insert(&Subscriber);
}

void {{class}}::UnsubscribeFrom{{class_capital}}StateChanged({{sub_class}}& Subscriber)
{
    {{class_capital}}StateSubscribers.erase(&Subscriber);
}

{% for property in interface.properties %}
void {{class}}::Publish{{property|unrealVarName}}Changed({{property|unrealReturn: true}} Value)
{
    for(auto& Subscriber: {{class_capital}}StateSubscribers)
    {
        {% comment %} TODO clean up Subscribers if Subscriber is not valid anymore {% endcomment %}
        if(Subscriber)
        {
            Subscriber->On{{property|unrealVarName}}Changed(Value);
        }
    }
}
{% endfor %}

{% for signal in interface.signals %}
void {{class}}::SubscribeTo{{signal|unrealVarName}}({{sub_class}}& Subscriber)
{
    {{signal|unrealVarName}}Subscribers.insert(&Subscriber);
}
void {{class}}::UnsubscribeFrom{{signal|unrealVarName}}({{sub_class}}& Subscriber)
{
    {{signal|unrealVarName}}Subscribers.erase(&Subscriber);
}

void {{class}}::Publish{{signal|unrealVarName}}(
    {%- for param in signal.params -%}
        {{param|unrealReturn: true}} {{param|unrealVarName}}{% unless forloop.last %},{% endunless -%}
    {%- endfor -%}
)
{
    for(auto& Subscriber: {{signal|unrealVarName}}Subscribers)
    {
        {% comment %} TODO clean up Subscribers if Subscriber is not valid anymore {% endcomment %}
        if(Subscriber)
        {
            Subscriber->On{{signal|unrealVarName}}(
            {%- for param in signal.params -%}
                {{param|unrealVarName}}{% unless forloop.last %},{% endunless -%}
            {%- endfor -%}
            );
        }
    }
}
{{nl}}
{% endfor -%}
